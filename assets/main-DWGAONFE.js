(function(){const w=document.createElement("link").relList;if(w&&w.supports&&w.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))u(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const s of a.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&u(s)}).observe(document,{childList:!0,subtree:!0});function p(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function u(i){if(i.ep)return;i.ep=!0;const a=p(i);fetch(i.href,a)}})();const _="modulepreload",S=function(n){return"/polyglot_connect/"+n},E={},b=function(w,p,u){let i=Promise.resolve();if(p&&p.length>0){document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),t=(s==null?void 0:s.nonce)||(s==null?void 0:s.getAttribute("nonce"));i=Promise.allSettled(p.map(r=>{if(r=S(r),r in E)return;E[r]=!0;const f=r.endsWith(".css"),m=f?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${r}"]${m}`))return;const d=document.createElement("link");if(d.rel=f?"stylesheet":_,f||(d.as="script"),d.crossOrigin="",d.href=r,t&&d.setAttribute("nonce",t),document.head.appendChild(d),f)return new Promise((e,o)=>{d.addEventListener("load",e),d.addEventListener("error",()=>o(new Error(`Unable to preload CSS for ${r}`)))})}))}function a(s){const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=s,window.dispatchEvent(t),!t.defaultPrevented)throw s}return i.then(s=>{for(const t of s||[])t.status==="rejected"&&a(t.reason);return w().catch(a)})};async function v(){try{console.log("Attempting to import @google/genai SDK from CDN...");const n=await b(()=>import("https://cdn.jsdelivr.net/npm/@google/genai@1.3.0/+esm"),[]);console.log("SDK Module loaded. Content of genaiModule:",n),console.log("Keys in genaiModule:",Object.keys(n)),n.GoogleGenAI?(window.GoogleGenAI=n.GoogleGenAI,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.GoogleGenAI")):n.default&&typeof n.default=="function"&&n.default.name&&n.default.name.includes("GoogleGenAI")?(window.GoogleGenAI=n.default,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.default (it was the class itself)")):n.default&&n.default.GoogleGenAI?(window.GoogleGenAI=n.default.GoogleGenAI,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.default.GoogleGenAI")):n.Ki?(console.warn("Found 'Ki' in genaiModule. Assuming it's an alias for GoogleGenAI based on bundle info. Assigning window.GoogleGenAI = genaiModule.Ki;"),window.GoogleGenAI=n.Ki):console.error("SDK LOAD FAILED: 'GoogleGenAI' (or expected alias) not found in the imported module's properties or its default export."),console.log("Final check: window.GoogleGenAI is now:",window.GoogleGenAI,"(Type: "+typeof window.GoogleGenAI+")")}catch(n){console.error("CRITICAL SDK IMPORT SCRIPT ERROR:",n),window.GoogleGenAI=void 0}}v();console.log("polyglot_connect/js/config.js: Attempting to export API keys from Vite env...");console.log("polyglot_connect/js/config.js: VITE_TEST_VAR from import.meta.env =","HelloFromActionBuildDirectEnv");const I="AIzaSyDfJspAjl93a5PnPENic7AG8yRT9vwRjh4",A="AIzaSyDVO5kq1eyZGVOsEV5tl9JwwkOVORvA1YI",h="AIzaSyBbaJ7v_I3P3ZX87gEROtcBgCj8bbFOCgc",y="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",C="3d69b9e446c2f59e6682d288386a7990318e5e3048726620b553c54e1e91fa76";console.log("config.js: GEMINI_API_KEY is ready for export.");console.log("config.js: GEMINI_API_KEY_ALT is ready for export.");console.log("config.js: GEMINI_API_KEY_ALT_2 is ready for export.");console.log("config.js: GROQ_API_KEY is ready for export.");console.log("config.js: TOGETHER_API_KEY is ready for export.");const G=Object.freeze(Object.defineProperty({__proto__:null,GEMINI_API_KEY:I,GEMINI_API_KEY_ALT:A,GEMINI_API_KEY_ALT_2:h,GROQ_API_KEY:y,TOGETHER_API_KEY:C},Symbol.toStringTag,{value:"Module"}));console.log("app.js: TOP LEVEL - Script executing.");console.log("app.js TOP LEVEL: VITE_TEST_VAR from import.meta.env is:","HelloFromActionBuildDirectEnv");console.log("app.js: Imported apiKeysConfig:",G);console.log("app.js (LOCAL DEV TEST): Imported VITE_TEST_VAR_EXPORT:",void 0);console.log("app.js: Attempting to set API keys on window object...");window.GEMINI_API_KEY=I;console.log("app.js: window.GEMINI_API_KEY set to:",window.GEMINI_API_KEY);window.GEMINI_API_KEY_ALT=A;console.log("app.js: window.GEMINI_API_KEY_ALT set to:",window.GEMINI_API_KEY_ALT);window.GEMINI_API_KEY_ALT_2=h;console.log("app.js: window.GEMINI_API_KEY_ALT_2 set to:",window.GEMINI_API_KEY_ALT_2);window.GROQ_API_KEY=y;console.log("app.js: window.GROQ_API_KEY set to:",window.GROQ_API_KEY);window.TOGETHER_API_KEY=C;console.log("app.js: window.TOGETHER_API_KEY set to:",window.TOGETHER_API_KEY);console.log("app.js: API keys set on window object.");window.GEMINI_API_KEY?console.log("app.js: CONFIRMED - window.GEMINI_API_KEY has been set from config.js."):console.warn("app.js: CONFIRMED - window.GEMINI_API_KEY is UNDEFINED after import from config.js.");window.GROQ_API_KEY?console.log("app.js: CONFIRMED - window.GROQ_API_KEY has been set from config.js."):console.warn("app.js: CONFIRMED - window.GROQ_API_KEY is UNDEFINED after import from config.js.");window.TOGETHER_API_KEY?console.log("app.js: CONFIRMED - window.TOGETHER_API_KEY has been set from config.js."):console.warn("app.js: CONFIRMED - window.TOGETHER_API_KEY is UNDEFINED after import from config.js.");document.addEventListener("DOMContentLoaded",()=>{var u,i,a,s,t,r,f,m,d;console.log("app.js: DOMContentLoaded event fired. Initializing app logic..."),console.log("app.js: At DOMContentLoaded, before polyglotApp creation, window.polyglotApp is:",window.polyglotApp),window.polyglotApp={},console.log("app.js: window.polyglotApp initialized to {}. Value is now:",window.polyglotApp),console.log("app.js: Starting critical module checks...");const n=[{name:"GEMINI_API_KEY",obj:window.GEMINI_API_KEY,isKey:!0},{name:"GROQ_API_KEY",obj:window.GROQ_API_KEY,isKey:!0},{name:"TOGETHER_API_KEY",obj:window.TOGETHER_API_KEY,isKey:!0},{name:"polyglotHelpers",obj:window.polyglotHelpers},{name:"flagLoader",obj:window.flagLoader},{name:"polyglotConnectors",obj:window.polyglotConnectors},{name:"polyglotGroupsData",obj:window.polyglotGroupsData},{name:"polyglotFilterLanguages",obj:window.polyglotFilterLanguages},{name:"polyglotFilterRoles",obj:window.polyglotFilterRoles},{name:"polyglotMinigamesData",obj:window.polyglotMinigamesData},{name:"polyglotSharedContent",obj:window.polyglotSharedContent},{name:"aiService",obj:window.aiService,keyFn:"generateTextMessage"},{name:"geminiLiveApiService",obj:window.geminiLiveApiService,keyFn:"connect"},{name:"activityManager",obj:window.activityManager,keyFn:"isConnectorActive"},{name:"groupManager",obj:window.groupManager,keyFn:"initialize"},{name:"conversationManager",obj:window.conversationManager,keyFn:"initialize"},{name:"textMessageHandler",obj:window.textMessageHandler,keyFn:"sendEmbeddedTextMessage"},{name:"voiceMemoHandler",obj:window.voiceMemoHandler,keyFn:"handleNewVoiceMemoInteraction"},{name:"chatActiveTargetManager",obj:window.chatActiveTargetManager,keyFn:"getEmbeddedChatTargetId"},{name:"chatSessionHandler",obj:window.chatSessionHandler,keyFn:"initialize"},{name:"chatOrchestrator",obj:window.chatOrchestrator,keyFn:"initialize"},{name:"sessionStateManager",obj:window.sessionStateManager,keyFn:"initializeBaseSession"},{name:"liveCallHandler",obj:window.liveCallHandler,keyFn:"startLiveCall"},{name:"sessionHistoryManager",obj:window.sessionHistoryManager,keyFn:"initializeHistory"},{name:"sessionManager",obj:window.sessionManager,keyFn:"initialize"},{name:"domElements",obj:window.domElements},{name:"modalHandler",obj:window.modalHandler,keyFn:"open"},{name:"uiUpdater",obj:window.uiUpdater,keyFn:"appendToVoiceChatLog"},{name:"cardRenderer",obj:window.cardRenderer,keyFn:"renderCards"},{name:"listRenderer",obj:window.listRenderer,keyFn:"renderActiveChatList"},{name:"shellSetup",obj:window.shellSetup,keyFn:"initializeAppCore"},{name:"viewManager",obj:window.viewManager,keyFn:"switchView"},{name:"filterController",obj:window.filterController,keyFn:"initializeFilters"},{name:"personaModalManager",obj:window.personaModalManager,keyFn:"openDetailedPersonaModal"},{name:"chatUiManager",obj:window.chatUiManager,keyFn:"showEmbeddedChatInterface"},{name:"chatEventListeners",obj:window.chatEventListeners,keyFn:"initializeEventListeners"}];for(const e of n){if(console.log(`app.js: Checking module: '${e.name}'. Expected on window: window.${e.name}`),console.log(`app.js: Value of window.${e.name} is:`,e.obj),e.obj&&e.keyFn&&console.log(`app.js: Checking key function '${e.keyFn}' on window.${e.name}. Type: ${typeof e.obj[e.keyFn]}`),e.isKey){if(!e.obj||e.obj.includes("YOUR_")||e.obj.includes("gsk_YOUR_")){const o=`APP INIT ERROR: API Key '${e.name}' is missing or invalid (from Vite setup). Halting.`;console.error(o,"Current value for",e.name,":",e.obj),document.body.innerHTML=`<p style='padding:20px; text-align:center; color:red;'>
                    Application Error: Required API Key (${e.name}) is invalid.
                    Check console for details.</p>`;return}}else if(!e.obj||e.keyFn&&typeof e.obj[e.keyFn]!="function"){const g=`APP INIT ERROR: Module '${e.name}' missing/invalid. Halting.`;console.error(g,`Module object (window.${e.name}) is:`,e.obj,e.obj?`Type: ${typeof e.obj}`:"Module object is null/undefined."),e.obj&&e.keyFn&&console.error(`app.js: Detail for '${e.name}': keyFn '${e.keyFn}' check failed. typeof mod.obj[mod.keyFn] is ${typeof e.obj[e.keyFn]}`),document.body.innerHTML=`
                    <p style='padding:20px; text-align:center; color:red;'>
                        Application Error: Module ${e.name} is invalid or missing.
                        Check console for details.
                    </p>`;return}console.log(`app.js: Module '${e.name}' check PASSED.`)}console.log("app.js: All critical module checks complete successfully."),console.log("app.js: Before assigning chatManager, window.chatOrchestrator is:",window.chatOrchestrator),window.chatOrchestrator?(window.chatManager=window.chatOrchestrator,console.log("app.js: window.chatManager is now aliased to window.chatOrchestrator. Value is:",window.chatManager)):console.error("app.js: CRITICAL - chatOrchestrator not found AFTER criticalModules check! This implies it failed the check. Chat functionality will fail."),console.log("app.js: Defining polyglotApp.initiateSession. Current window.polyglotApp:",window.polyglotApp),polyglotApp.initiateSession=(e,o)=>{console.log(`app.js: polyglotApp.initiateSession CALLED for ${(e==null?void 0:e.id)||"UnknownConnector"}, type: ${o}`);const g=window.viewManager,c=window.chatManager,l=window.sessionManager;if(console.log("app.js: initiateSession - Dependencies: viewManager:",!!g,"chatManager:",!!c,"sessionManager:",!!l),!g){console.error("app.js: initiateSession - viewManager is not available!");return}if(!c){console.error("app.js: initiateSession - chatManager (chatOrchestrator) is not available!");return}if(!l){console.error("app.js: initiateSession - sessionManager is not available!");return}if(!e||!e.id){console.error("app.js: initiateSession - invalid connector object or missing connector.id",e);return}switch(console.log("app.js: initiateSession - Connector and sessionTypeWithContext are valid. Proceeding with switch."),o){case"message":console.log("app.js: initiateSession - Case 'message'"),c.openConversation?c.openConversation(e):console.error("app.js: initiateSession - chatManager.openConversation is not defined!"),g.switchView?g.switchView("messages"):console.error("app.js: initiateSession - viewManager.switchView is not defined!");break;case"message_modal":console.log("app.js: initiateSession - Case 'message_modal'"),c.openMessageModal?c.openMessageModal(e):console.error("app.js: initiateSession - chatManager.openMessageModal is not defined!");break;case"direct_modal":console.log("app.js: initiateSession - Case 'direct_modal'"),l.startModalSession?l.startModalSession(e,o):console.error("app.js: initiateSession - sessionManager.startModalSession is not defined!");break;default:console.warn("app.js: Unknown sessionType in initiateSession:",o)}console.log("app.js: initiateSession - Switch statement finished.")},console.log("app.js: polyglotApp.initiateSession assignment complete. window.polyglotApp is now:",window.polyglotApp);function w(){console.log("app.js: setupGlobalModalButtonListeners - STARTING.");const e=window.domElements,o=window.sessionManager,g=window.chatManager,c=window.modalHandler;if(console.log("app.js: setupGlobalModalButtonListeners - Dependencies: domElements:",!!e,"sessionManager:",!!o,"chatManager:",!!g,"modalHandler:",!!c),!e||!o||!g||!c){console.error("App.js setupGlobalModalButtonListeners: One or more core dependencies MISSING!");return}e.closeRecapBtn?(console.log("app.js: Adding listener to closeRecapBtn"),e.closeRecapBtn.addEventListener("click",()=>{console.log("app.js: Close Recap Button CLICKED!"),c.close(e.sessionRecapScreen)})):console.warn("app.js: domElements.closeRecapBtn not found for listener."),e.downloadTranscriptBtn?(console.log("app.js: Adding listener to downloadTranscriptBtn"),e.downloadTranscriptBtn.addEventListener("click",()=>{var j,M;console.log("app.js: Download Transcript Button (Modal) CLICKED!");const l=(j=e.sessionRecapScreen)==null?void 0:j.dataset.sessionIdForDownload;console.log("app.js: downloadTranscriptBtn - sessionId:",l),l&&o.downloadTranscriptForSession?o.downloadTranscriptForSession(l):console.warn("app.js: No session ID on recap-download-transcript-btn or sessionManager.downloadTranscriptForSession missing. Session ID:",l,"sessionRecapScreen dataset:",(M=e.sessionRecapScreen)==null?void 0:M.dataset)})):console.warn("app.js: domElements.downloadTranscriptBtn not found for listener."),e.cancelCallBtn?(console.log("app.js: Adding listener to cancelCallBtn"),e.cancelCallBtn.addEventListener("click",()=>{console.log("app.js: Cancel Call Button CLICKED!"),o.cancelModalCallAttempt?o.cancelModalCallAttempt():console.error("app.js: sessionManager.cancelModalCallAttempt is not defined!")})):console.warn("app.js: domElements.cancelCallBtn not found."),e.directCallEndBtn?(console.log("app.js: Adding listener to directCallEndBtn"),e.directCallEndBtn.addEventListener("click",()=>{console.log("app.js: Direct Call End Button CLICKED!"),o.endCurrentModalSession?o.endCurrentModalSession(!0):console.error("app.js: sessionManager.endCurrentModalSession is not defined!")})):console.warn("app.js: domElements.directCallEndBtn not found."),e.directCallSpeakerToggleBtn?(console.log("app.js: Adding listener to directCallSpeakerToggleBtn"),e.directCallSpeakerToggleBtn.addEventListener("click",()=>{console.log("app.js: Direct Call Speaker Toggle Button CLICKED!"),o.toggleDirectCallSpeaker?o.toggleDirectCallSpeaker():console.error("app.js: sessionManager.toggleDirectCallSpeaker is not defined!")})):console.warn("app.js: domElements.directCallSpeakerToggleBtn not found."),e.directCallMuteBtn?(console.log("app.js: Adding listener to directCallMuteBtn"),e.directCallMuteBtn.addEventListener("click",()=>{console.log("app.js: Direct Call Mute Button CLICKED!"),o.handleDirectCallMicToggle?o.handleDirectCallMicToggle():console.error("app.js: sessionManager.handleDirectCallMicToggle is not defined!")})):console.warn("app.js: domElements.directCallMuteBtn not found."),e.directCallActivityBtn?(console.log("app.js: Adding listener to directCallActivityBtn"),e.directCallActivityBtn.addEventListener("click",()=>{console.log("app.js: Direct Call Activity Button CLICKED!"),o.handleDirectCallActivityRequest?o.handleDirectCallActivityRequest():console.error("app.js: sessionManager.handleDirectCallActivityRequest is not defined!")})):console.warn("app.js: domElements.directCallActivityBtn not found."),e.closeMessagingModalBtn?(console.log("app.js: Adding listener to closeMessagingModalBtn"),e.closeMessagingModalBtn.addEventListener("click",()=>{var l;console.log("app.js: Close Messaging Modal Button CLICKED!"),(l=window.chatSessionHandler)!=null&&l.endActiveModalMessagingSession?window.chatSessionHandler.endActiveModalMessagingSession():console.error("app.js: window.chatSessionHandler.endActiveModalMessagingSession is not defined!")})):console.warn("app.js: domElements.closeMessagingModalBtn not found for listener."),console.log("app.js: Modal message send button/input listeners are now expected to be handled by chat_event_listeners.js or chat_ui_manager.js via chatSessionHandler."),console.log("app.js: Global modal button listeners setup process finished.")}console.log("app.js: Initializing core managers (after critical checks)..."),(u=window.conversationManager)!=null&&u.initialize?(console.log("app.js: Initializing conversationManager..."),window.conversationManager.initialize()):console.warn("app.js: window.conversationManager.initialize not found."),(i=window.chatOrchestrator)!=null&&i.initialize?(console.log("app.js: Initializing chatOrchestrator (which becomes chatManager)..."),window.chatOrchestrator.initialize()):console.warn("app.js: window.chatOrchestrator.initialize not found. This means chatManager will be a dummy."),window.chatOrchestrator&&(window.chatManager=window.chatOrchestrator,console.log("app.js: Re-affirmed window.chatManager alias to window.chatOrchestrator post-initialization. chatManager:",!!window.chatManager)),(a=window.sessionManager)!=null&&a.initialize?(console.log("app.js: Initializing sessionManager..."),window.sessionManager.initialize()):console.warn("app.js: window.sessionManager.initialize not found."),(s=window.groupManager)!=null&&s.initialize?(console.log("app.js: Initializing groupManager..."),window.groupManager.initialize()):console.warn("app.js: window.groupManager.initialize not found."),(t=window.chatSessionHandler)!=null&&t.initialize?(console.log("app.js: Initializing chatSessionHandler..."),window.chatSessionHandler.initialize()):console.warn("app.js: window.chatSessionHandler.initialize not found."),console.log("app.js: Core managers initialization sequence complete."),console.log("app.js: Initializing core UI (after manager initializations)...");let p=!1;(r=window.shellSetup)!=null&&r.initializeAppCore?(console.log("app.js: Calling window.shellSetup.initializeAppCore()..."),p=window.shellSetup.initializeAppCore(),console.log("app.js: window.shellSetup.initializeAppCore() returned:",p)):console.error("app.js: window.shellSetup.initializeAppCore is not available!"),!p&&window.shellSetup?console.error("app.js: Core UI initialization reported failure or shellSetup was missing initializeAppCore."):window.shellSetup||console.error("app.js: window.shellSetup is itself not available! Cannot initialize core UI."),console.log("app.js: Core UI initialization process finished."),(f=window.chatEventListeners)!=null&&f.initializeEventListeners?(console.log("app.js: Calling window.chatEventListeners.initializeEventListeners()..."),window.chatEventListeners.initializeEventListeners()):console.warn("app.js: window.chatEventListeners.initializeEventListeners not available."),(m=window.filterController)!=null&&m.initializeFilters?(console.log("app.js: Initializing filterController filters..."),window.filterController.initializeFilters()):console.warn("app.js: filterController.initializeFilters not available."),(d=window.viewManager)!=null&&d.initializeAndSwitchToInitialView?(console.log("app.js: Initializing viewManager and switching to initial view..."),window.viewManager.initializeAndSwitchToInitialView()):console.warn("app.js: viewManager.initializeAndSwitchToInitialView not available."),console.log("app.js: Preparing to setup global modal button listeners..."),w(),console.log("Polyglot Connect Application Initialized! (app.js: DOMContentLoaded end)")});console.log("app.js: Script parsing finished. DOMContentLoaded listener is set.");
