import{aL as g,aM as y,aN as x,aO as p,aY as o,aQ as T,aZ as d}from"./groups-CJkJlMbi.js";const D={free:{textMessages:50,voiceCalls:5},premium:{textMessages:1/0,voiceCalls:1/0}};async function R(e){var r,c;const l=g.currentUser;if(!l)return{allowed:!1,plan:"none"};const t=y(x,"users",l.uid);try{const n=await p(t);if(!n.exists())return{allowed:!1,plan:"none"};const s=n.data(),a=s.plan||"free",f=((r=s.usageResetTimestamp)==null?void 0:r.toDate())||new Date,C=30*24*60*60*1e3,u=new Date(f.getTime()+C),i=new Date;if(i>=u)return await o(t,{monthlyTextCount:0,monthlyCallCount:0,usageResetTimestamp:T()}),await o(t,{[e==="textMessages"?"monthlyTextCount":"monthlyCallCount"]:d(1)}),{allowed:!0,plan:a,daysUntilReset:30};const w=(c=D[a])==null?void 0:c[e];if((e==="textMessages"?s.monthlyTextCount||0:s.monthlyCallCount||0)<w)return await o(t,{[e==="textMessages"?"monthlyTextCount":"monthlyCallCount"]:d(1)}),{allowed:!0,plan:a};{const m=u.getTime()-i.getTime(),h=Math.ceil(m/(1e3*60*60*24));return{allowed:!1,plan:a,daysUntilReset:h}}}catch(n){return console.error("Error in checkAndIncrementUsage:",n),{allowed:!1,plan:"unknown"}}}export{R as checkAndIncrementUsage};
