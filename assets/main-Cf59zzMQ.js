(function(){const p=document.createElement("link").relList;if(p&&p.supports&&p.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))u(i);new MutationObserver(i=>{for(const t of i)if(t.type==="childList")for(const a of t.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&u(a)}).observe(document,{childList:!0,subtree:!0});function c(i){const t={};return i.integrity&&(t.integrity=i.integrity),i.referrerPolicy&&(t.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?t.credentials="include":i.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function u(i){if(i.ep)return;i.ep=!0;const t=c(i);fetch(i.href,t)}})();const M="modulepreload",A=function(n){return"/polyglot_connect/"+n},I={},E=function(p,c,u){let i=Promise.resolve();if(c&&c.length>0){document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),r=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));i=Promise.allSettled(c.map(d=>{if(d=A(d),d in I)return;I[d]=!0;const w=d.endsWith(".css"),e=w?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${d}"]${e}`))return;const o=document.createElement("link");if(o.rel=w?"stylesheet":M,w||(o.as="script"),o.crossOrigin="",o.href=d,r&&o.setAttribute("nonce",r),document.head.appendChild(o),w)return new Promise((s,f)=>{o.addEventListener("load",s),o.addEventListener("error",()=>f(new Error(`Unable to preload CSS for ${d}`)))})}))}function t(a){const r=new Event("vite:preloadError",{cancelable:!0});if(r.payload=a,window.dispatchEvent(r),!r.defaultPrevented)throw a}return i.then(a=>{for(const r of a||[])r.status==="rejected"&&t(r.reason);return p().catch(t)})};async function y(){try{console.log("Attempting to import @google/genai SDK from CDN...");const n=await E(()=>import("https://cdn.jsdelivr.net/npm/@google/genai@1.3.0/+esm"),[]);console.log("SDK Module loaded. Content of genaiModule:",n),console.log("Keys in genaiModule:",Object.keys(n)),n.GoogleGenAI?(window.GoogleGenAI=n.GoogleGenAI,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.GoogleGenAI")):n.default&&typeof n.default=="function"&&n.default.name&&n.default.name.includes("GoogleGenAI")?(window.GoogleGenAI=n.default,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.default (it was the class itself)")):n.default&&n.default.GoogleGenAI?(window.GoogleGenAI=n.default.GoogleGenAI,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.default.GoogleGenAI")):n.Ki?(console.warn("Found 'Ki' in genaiModule. Assuming it's an alias for GoogleGenAI based on bundle info. Assigning window.GoogleGenAI = genaiModule.Ki;"),window.GoogleGenAI=n.Ki):console.error("SDK LOAD FAILED: 'GoogleGenAI' (or expected alias) not found in the imported module's properties or its default export."),console.log("Final check: window.GoogleGenAI is now:",window.GoogleGenAI,"(Type: "+typeof window.GoogleGenAI+")")}catch(n){console.error("CRITICAL SDK IMPORT SCRIPT ERROR:",n),window.GoogleGenAI=void 0}}y();console.log("polyglot_connect/js/config.js: Attempting to export API keys from Vite env...");console.log("polyglot_connect/js/config.js: VITE_TEST_VAR from import.meta.env =","HelloFromActionBuildDirectEnv");const j="AIzaSyDfJspAjl93a5PnPENic7AG8yRT9vwRjh4",G="AIzaSyDVO5kq1eyZGVOsEV5tl9JwwkOVORvA1YI",_="AIzaSyBbaJ7v_I3P3ZX87gEROtcBgCj8bbFOCgc",b="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",h="3d69b9e446c2f59e6682d288386a7990318e5e3048726620b553c54e1e91fa76";console.log("config.js: GEMINI_API_KEY is ready for export.");console.log("config.js: GEMINI_API_KEY_ALT is ready for export.");console.log("config.js: GEMINI_API_KEY_ALT_2 is ready for export.");console.log("config.js: GROQ_API_KEY is ready for export.");console.log("config.js: TOGETHER_API_KEY is ready for export.");window.GEMINI_API_KEY=j;window.GEMINI_API_KEY_ALT=G;window.GEMINI_API_KEY_ALT_2=_;window.GROQ_API_KEY=b;window.TOGETHER_API_KEY=h;window.GEMINI_API_KEY?console.log("app.js: window.GEMINI_API_KEY has been set from config.js."):console.warn("app.js: window.GEMINI_API_KEY is UNDEFINED after import from config.js.");window.GROQ_API_KEY?console.log("app.js: window.GROQ_API_KEY has been set from config.js."):console.warn("app.js: window.GROQ_API_KEY is UNDEFINED after import from config.js.");window.TOGETHER_API_KEY?console.log("app.js: window.TOGETHER_API_KEY has been set from config.js."):console.warn("app.js: window.TOGETHER_API_KEY is UNDEFINED after import from config.js.");document.addEventListener("DOMContentLoaded",()=>{var u,i,t,a,r,d,w;console.log("app.js: DOM fully loaded. Initializing app logic..."),window.polyglotApp={};const n=[{name:"GEMINI_API_KEY",obj:window.GEMINI_API_KEY,isKey:!0},{name:"GROQ_API_KEY",obj:window.GROQ_API_KEY,isKey:!0},{name:"TOGETHER_API_KEY",obj:window.TOGETHER_API_KEY,isKey:!0},{name:"polyglotHelpers",obj:window.polyglotHelpers},{name:"flagLoader",obj:window.flagLoader},{name:"polyglotConnectors",obj:window.polyglotConnectors},{name:"polyglotGroupsData",obj:window.polyglotGroupsData},{name:"polyglotFilterLanguages",obj:window.polyglotFilterLanguages},{name:"polyglotFilterRoles",obj:window.polyglotFilterRoles},{name:"polyglotMinigamesData",obj:window.polyglotMinigamesData},{name:"polyglotSharedContent",obj:window.polyglotSharedContent},{name:"aiService",obj:window.aiService,keyFn:"generateTextMessage"},{name:"geminiLiveApiService",obj:window.geminiLiveApiService,keyFn:"connect"},{name:"activityManager",obj:window.activityManager,keyFn:"isConnectorActive"},{name:"groupManager",obj:window.groupManager,keyFn:"initialize"},{name:"conversationManager",obj:window.conversationManager,keyFn:"initialize"},{name:"textMessageHandler",obj:window.textMessageHandler,keyFn:"sendEmbeddedTextMessage"},{name:"voiceMemoHandler",obj:window.voiceMemoHandler,keyFn:"handleNewVoiceMemoInteraction"},{name:"chatOrchestrator",obj:window.chatOrchestrator,keyFn:"initialize"},{name:"sessionStateManager",obj:window.sessionStateManager,keyFn:"initializeBaseSession"},{name:"liveCallHandler",obj:window.liveCallHandler,keyFn:"startLiveCall"},{name:"sessionHistoryManager",obj:window.sessionHistoryManager,keyFn:"initializeHistory"},{name:"sessionManager",obj:window.sessionManager,keyFn:"initialize"},{name:"domElements",obj:window.domElements},{name:"modalHandler",obj:window.modalHandler,keyFn:"open"},{name:"uiUpdater",obj:window.uiUpdater,keyFn:"appendToVoiceChatLog"},{name:"cardRenderer",obj:window.cardRenderer,keyFn:"renderCards"},{name:"listRenderer",obj:window.listRenderer,keyFn:"renderActiveChatList"},{name:"shellSetup",obj:window.shellSetup,keyFn:"initializeAppCore"},{name:"viewManager",obj:window.viewManager,keyFn:"switchView"},{name:"filterController",obj:window.filterController,keyFn:"initializeFilters"},{name:"personaModalManager",obj:window.personaModalManager,keyFn:"openDetailedPersonaModal"},{name:"chatUiManager",obj:window.chatUiManager,keyFn:"showEmbeddedChatInterface"}];for(const e of n)if(e.isKey){if(!e.obj||e.obj.includes("YOUR_")||e.obj.includes("gsk_YOUR_")){const o=`APP INIT ERROR: API Key '${e.name}' is missing or invalid (from Vite setup).`;console.error(o,"Current value for",e.name,":",e.obj),document.body.innerHTML=`<p style='padding:20px; text-align:center;'>
                    Application Error: Required API Key (${e.name}) is invalid. 
                    Check console for details.</p>`;return}}else if(!e.obj||e.keyFn&&typeof e.obj[e.keyFn]!="function"){const s=`APP INIT ERROR: Module '${e.name}' missing/invalid. Halting.`;console.error(s,e.obj?`Type: ${typeof e.obj}`:"Module object is null/undefined"),document.body.innerHTML=`
                    <p style='padding:20px; text-align:center; color:red;'>
                        Application Error: Module ${e.name} is invalid or missing.
                        Check console for details.
                    </p>`;return}console.log("app.js: Module checks complete."),window.chatOrchestrator?(window.chatManager=window.chatOrchestrator,console.log("app.js: window.chatManager is now aliased to window.chatOrchestrator.")):console.error("app.js: CRITICAL - chatOrchestrator not found! Chat functionality will fail."),window.polyglotApp||(window.polyglotApp={}),polyglotApp.initiateSession=(e,o)=>{var f,g,l;console.log(`app.js: polyglotApp.initiateSession CALLED for ${(e==null?void 0:e.id)||"UnknownConnector"}, type: ${o}`);const s=window.viewManager;if(!s){console.error("app.js: initiateSession - viewManager is not available!");return}if(!window.chatManager){console.error("app.js: initiateSession - chatManager is not available!");return}if(!window.sessionManager){console.error("app.js: initiateSession - sessionManager is not available!");return}if(!e||!e.id){console.error("app.js: initiateSession - invalid connector object or missing connector.id",e);return}switch(o){case"message":(f=window.chatManager)==null||f.openConversation(e),s==null||s.switchView("messages");break;case"message_modal":(g=window.chatManager)==null||g.openMessageModal(e);break;case"direct_modal":(l=window.sessionManager)==null||l.startModalSession(e,o);break;default:console.warn("app.js: Unknown sessionType:",o)}},console.log("app.js: polyglotApp.initiateSession assignment complete.");function p(){console.log("app.js: setupGlobalModalButtonListeners - STARTING.");const{domElements:e,sessionManager:o,chatManager:s,modalHandler:f}=window;if(!e){console.error("App.js setupGlobalModalButtonListeners: domElements MISSING!");return}if(!o){console.error("App.js setupGlobalModalButtonListeners: sessionManager MISSING!");return}if(!s){console.error("App.js setupGlobalModalButtonListeners: chatManager MISSING!");return}if(!f){console.error("App.js setupGlobalModalButtonListeners: modalHandler MISSING!");return}if(e.closeRecapBtn?e.closeRecapBtn.addEventListener("click",()=>{console.log("Close Recap Button CLICKED!"),f.close(e.sessionRecapScreen)}):console.warn("app.js: domElements.closeRecapBtn not found."),e.downloadTranscriptBtn?e.downloadTranscriptBtn.addEventListener("click",()=>{var l,m;console.log("Download Transcript Button (Modal) CLICKED!");const g=(l=e.sessionRecapScreen)==null?void 0:l.dataset.sessionIdForDownload;g?o.downloadTranscriptForSession(g):console.warn("app.js: No session ID on recap-download-transcript-btn for sessionRecapScreen:",(m=e.sessionRecapScreen)==null?void 0:m.dataset)}):console.warn("app.js: domElements.downloadTranscriptBtn not found."),e.cancelCallBtn&&e.cancelCallBtn.addEventListener("click",()=>o.cancelModalCallAttempt()),e.directCallEndBtn&&e.directCallEndBtn.addEventListener("click",()=>o.endCurrentModalSession(!0)),e.directCallSpeakerToggleBtn&&e.directCallSpeakerToggleBtn.addEventListener("click",()=>o.toggleDirectCallSpeaker()),e.directCallMuteBtn&&e.directCallMuteBtn.addEventListener("click",()=>o.handleDirectCallMicToggle()),e.directCallActivityBtn&&e.directCallActivityBtn.addEventListener("click",()=>o.handleDirectCallActivityRequest()),e.closeMessagingModalBtn&&e.closeMessagingModalBtn.addEventListener("click",()=>s.endModalMessagingSession()),e.messageSendBtn&&e.messageTextInput){const g=()=>{if(e.messageTextInput&&s.getTextMessageHandler){const l=s.getTextMessageHandler();l&&typeof l.sendModalTextMessage=="function"?(l.sendModalTextMessage(e.messageTextInput.value,s.getCurrentModalMessageTarget()),e.messageTextInput.value=""):console.error("textMessageHandler or sendModalTextMessage not available.")}else console.error("messageTextInput or chatManager.getTextMessageHandler not available.")};e.messageSendBtn.addEventListener("click",g),e.messageTextInput.addEventListener("keypress",l=>{l.key==="Enter"&&!l.shiftKey&&(l.preventDefault(),g())})}else e.messageSendBtn||console.warn("app.js: domElements.messageSendBtn not found."),e.messageTextInput||console.warn("app.js: domElements.messageTextInput not found.");console.log("app.js: Global modal button listeners setup process finished.")}console.log("app.js: Initializing core managers (after critical checks)..."),(u=window.conversationManager)!=null&&u.initialize&&(console.log("app.js: Initializing conversationManager..."),window.conversationManager.initialize()),(i=window.chatManager)!=null&&i.initialize&&(console.log("app.js: Initializing chatManager (aliased chatOrchestrator)..."),window.chatManager.initialize()),(t=window.sessionManager)!=null&&t.initialize&&(console.log("app.js: Initializing sessionManager..."),window.sessionManager.initialize()),(a=window.groupManager)!=null&&a.initialize&&(console.log("app.js: Initializing groupManager..."),window.groupManager.initialize()),console.log("app.js: Core managers initialization complete."),console.log("app.js: Initializing core UI (after manager initializations)...");let c=!1;(r=window.shellSetup)!=null&&r.initializeAppCore?c=window.shellSetup.initializeAppCore():console.error("app.js: window.shellSetup.initializeAppCore is not available!"),!c&&window.shellSetup?console.error("app.js: Core UI initialization reported failure or shellSetup was missing initializeAppCore."):window.shellSetup||console.error("app.js: window.shellSetup is itself not available!"),console.log("app.js: Core UI initialization process finished."),(d=window.filterController)!=null&&d.initializeFilters?(console.log("app.js: Initializing filterController filters..."),window.filterController.initializeFilters()):console.warn("app.js: filterController.initializeFilters not available."),(w=window.viewManager)!=null&&w.initializeAndSwitchToInitialView?(console.log("app.js: Initializing viewManager and switching to initial view..."),window.viewManager.initializeAndSwitchToInitialView()):console.warn("app.js: viewManager.initializeAndSwitchToInitialView not available."),p(),console.log("Polyglot Connect Application Initialized!")});
