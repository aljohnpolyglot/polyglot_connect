(function(){const g=document.createElement("link").relList;if(g&&g.supports&&g.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))m(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&m(a)}).observe(document,{childList:!0,subtree:!0});function c(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerPolicy&&(s.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?s.credentials="include":t.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function m(t){if(t.ep)return;t.ep=!0;const s=c(t);fetch(t.href,s)}})();const b="modulepreload",S=function(i){return"/polyglot_connect/"+i},I={},v=function(g,c,m){let t=Promise.resolve();if(c&&c.length>0){document.getElementsByTagName("link");const a=document.querySelector("meta[property=csp-nonce]"),l=(a==null?void 0:a.nonce)||(a==null?void 0:a.getAttribute("nonce"));t=Promise.allSettled(c.map(r=>{if(r=S(r),r in I)return;I[r]=!0;const f=r.endsWith(".css"),E=f?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${r}"]${E}`))return;const d=document.createElement("link");if(d.rel=f?"stylesheet":b,f||(d.as="script"),d.crossOrigin="",d.href=r,l&&d.setAttribute("nonce",l),document.head.appendChild(d),f)return new Promise((e,o)=>{d.addEventListener("load",e),d.addEventListener("error",()=>o(new Error(`Unable to preload CSS for ${r}`)))})}))}function s(a){const l=new Event("vite:preloadError",{cancelable:!0});if(l.payload=a,window.dispatchEvent(l),!l.defaultPrevented)throw a}return t.then(a=>{for(const l of a||[])l.status==="rejected"&&s(l.reason);return g().catch(s)})};async function C(){try{console.log("Attempting to import @google/genai SDK from CDN...");const i=await v(()=>import("https://cdn.jsdelivr.net/npm/@google/genai@1.3.0/+esm"),[]);console.log("SDK Module loaded. Content of genaiModule:",i),console.log("Keys in genaiModule:",Object.keys(i)),i.GoogleGenAI?(window.GoogleGenAI=i.GoogleGenAI,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.GoogleGenAI")):i.default&&typeof i.default=="function"&&i.default.name&&i.default.name.includes("GoogleGenAI")?(window.GoogleGenAI=i.default,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.default (it was the class itself)")):i.default&&i.default.GoogleGenAI?(window.GoogleGenAI=i.default.GoogleGenAI,console.log("SUCCESS: Assigned window.GoogleGenAI from genaiModule.default.GoogleGenAI")):i.Ki?(console.warn("Found 'Ki' in genaiModule. Assuming it's an alias for GoogleGenAI based on bundle info. Assigning window.GoogleGenAI = genaiModule.Ki;"),window.GoogleGenAI=i.Ki):console.error("SDK LOAD FAILED: 'GoogleGenAI' (or expected alias) not found in the imported module's properties or its default export."),console.log("Final check: window.GoogleGenAI is now:",window.GoogleGenAI,"(Type: "+typeof window.GoogleGenAI+")")}catch(i){console.error("CRITICAL SDK IMPORT SCRIPT ERROR:",i),window.GoogleGenAI=void 0}}C();console.log("polyglot_connect/js/config.js: Attempting to export API keys from Vite env...");console.log("polyglot_connect/js/config.js: VITE_TEST_VAR from import.meta.env =","HelloFromActionBuildDirectEnv");const A="AIzaSyDfJspAjl93a5PnPENic7AG8yRT9vwRjh4",h="AIzaSyDVO5kq1eyZGVOsEV5tl9JwwkOVORvA1YI",M="AIzaSyBbaJ7v_I3P3ZX87gEROtcBgCj8bbFOCgc",y="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",_="3d69b9e446c2f59e6682d288386a7990318e5e3048726620b553c54e1e91fa76";console.log("config.js: GEMINI_API_KEY is ready for export.");console.log("config.js: GEMINI_API_KEY_ALT is ready for export.");console.log("config.js: GEMINI_API_KEY_ALT_2 is ready for export.");console.log("config.js: GROQ_API_KEY is ready for export.");console.log("config.js: TOGETHER_API_KEY is ready for export.");const G=Object.freeze(Object.defineProperty({__proto__:null,GEMINI_API_KEY:A,GEMINI_API_KEY_ALT:h,GEMINI_API_KEY_ALT_2:M,GROQ_API_KEY:y,TOGETHER_API_KEY:_},Symbol.toStringTag,{value:"Module"}));console.log("app.js: TOP LEVEL - Script executing.");console.log("app.js TOP LEVEL: VITE_TEST_VAR from import.meta.env is:","HelloFromActionBuildDirectEnv");console.log("app.js: Imported apiKeysConfig:",G);console.log("app.js (LOCAL DEV TEST): Imported VITE_TEST_VAR_EXPORT:",void 0);console.log("app.js: Attempting to set API keys on window object...");window.GEMINI_API_KEY=A;console.log("app.js: window.GEMINI_API_KEY set to:",window.GEMINI_API_KEY);window.GEMINI_API_KEY_ALT=h;console.log("app.js: window.GEMINI_API_KEY_ALT set to:",window.GEMINI_API_KEY_ALT);window.GEMINI_API_KEY_ALT_2=M;console.log("app.js: window.GEMINI_API_KEY_ALT_2 set to:",window.GEMINI_API_KEY_ALT_2);window.GROQ_API_KEY=y;console.log("app.js: window.GROQ_API_KEY set to:",window.GROQ_API_KEY);window.TOGETHER_API_KEY=_;console.log("app.js: window.TOGETHER_API_KEY set to:",window.TOGETHER_API_KEY);console.log("app.js: API keys set on window object.");window.GEMINI_API_KEY?console.log("app.js: CONFIRMED - window.GEMINI_API_KEY has been set from config.js."):console.warn("app.js: CONFIRMED - window.GEMINI_API_KEY is UNDEFINED after import from config.js.");window.GROQ_API_KEY?console.log("app.js: CONFIRMED - window.GROQ_API_KEY has been set from config.js."):console.warn("app.js: CONFIRMED - window.GROQ_API_KEY is UNDEFINED after import from config.js.");window.TOGETHER_API_KEY?console.log("app.js: CONFIRMED - window.TOGETHER_API_KEY has been set from config.js."):console.warn("app.js: CONFIRMED - window.TOGETHER_API_KEY is UNDEFINED after import from config.js.");document.addEventListener("DOMContentLoaded",()=>{var m,t,s,a,l,r,f,E,d;console.log("app.js: DOMContentLoaded event fired. Initializing app logic..."),console.log("app.js: At DOMContentLoaded, before polyglotApp creation, window.polyglotApp is:",window.polyglotApp),window.polyglotApp={},console.log("app.js: window.polyglotApp initialized to {}. Value is now:",window.polyglotApp),console.log("app.js: Starting critical module checks...");const i=[{name:"GEMINI_API_KEY",obj:window.GEMINI_API_KEY,isKey:!0},{name:"GROQ_API_KEY",obj:window.GROQ_API_KEY,isKey:!0},{name:"TOGETHER_API_KEY",obj:window.TOGETHER_API_KEY,isKey:!0},{name:"polyglotHelpers",obj:window.polyglotHelpers},{name:"flagLoader",obj:window.flagLoader},{name:"polyglotConnectors",obj:window.polyglotConnectors},{name:"polyglotGroupsData",obj:window.polyglotGroupsData},{name:"polyglotFilterLanguages",obj:window.polyglotFilterLanguages},{name:"polyglotFilterRoles",obj:window.polyglotFilterRoles},{name:"polyglotMinigamesData",obj:window.polyglotMinigamesData},{name:"polyglotSharedContent",obj:window.polyglotSharedContent},{name:"aiService",obj:window.aiService,keyFn:"generateTextMessage"},{name:"geminiLiveApiService",obj:window.geminiLiveApiService,keyFn:"connect"},{name:"activityManager",obj:window.activityManager,keyFn:"isConnectorActive"},{name:"groupManager",obj:window.groupManager,keyFn:"initialize"},{name:"conversationManager",obj:window.conversationManager,keyFn:"initialize"},{name:"textMessageHandler",obj:window.textMessageHandler,keyFn:"sendEmbeddedTextMessage"},{name:"voiceMemoHandler",obj:window.voiceMemoHandler,keyFn:"handleNewVoiceMemoInteraction"},{name:"chatActiveTargetManager",obj:window.chatActiveTargetManager,keyFn:"getEmbeddedChatTargetId"},{name:"chatSessionHandler",obj:window.chatSessionHandler,keyFn:"initialize"},{name:"chatOrchestrator",obj:window.chatOrchestrator,keyFn:"initialize"},{name:"sessionStateManager",obj:window.sessionStateManager,keyFn:"initializeBaseSession"},{name:"liveCallHandler",obj:window.liveCallHandler,keyFn:"startLiveCall"},{name:"sessionHistoryManager",obj:window.sessionHistoryManager,keyFn:"initializeHistory"},{name:"sessionManager",obj:window.sessionManager,keyFn:"initialize"},{name:"domElements",obj:window.domElements},{name:"modalHandler",obj:window.modalHandler,keyFn:"open"},{name:"uiUpdater",obj:window.uiUpdater,keyFn:"appendToVoiceChatLog"},{name:"cardRenderer",obj:window.cardRenderer,keyFn:"renderCards"},{name:"listRenderer",obj:window.listRenderer,keyFn:"renderActiveChatList"},{name:"shellSetup",obj:window.shellSetup,keyFn:"initializeAppCore"},{name:"viewManager",obj:window.viewManager,keyFn:"switchView"},{name:"filterController",obj:window.filterController,keyFn:"initializeFilters"},{name:"personaModalManager",obj:window.personaModalManager,keyFn:"openDetailedPersonaModal"},{name:"chatUiManager",obj:window.chatUiManager,keyFn:"showEmbeddedChatInterface"},{name:"chatEventListeners",obj:window.chatEventListeners,keyFn:"initializeEventListeners"}];for(const e of i){if(console.log(`app.js: Checking module: '${e.name}'. Expected on window: window.${e.name}`),console.log(`app.js: Value of window.${e.name} is:`,e.obj),e.obj&&e.keyFn&&console.log(`app.js: Checking key function '${e.keyFn}' on window.${e.name}. Type: ${typeof e.obj[e.keyFn]}`),e.isKey){if(!e.obj||e.obj.includes("YOUR_")||e.obj.includes("gsk_YOUR_")){const o=`APP INIT ERROR: API Key '${e.name}' is missing or invalid (from Vite setup). Halting.`;console.error(o,"Current value for",e.name,":",e.obj),document.body.innerHTML=`<p style='padding:20px; text-align:center; color:red;'>
                    Application Error: Required API Key (${e.name}) is invalid.
                    Check console for details.</p>`;return}}else if(!e.obj||e.keyFn&&typeof e.obj[e.keyFn]!="function"){const w=`APP INIT ERROR: Module '${e.name}' missing/invalid. Halting.`;console.error(w,`Module object (window.${e.name}) is:`,e.obj,e.obj?`Type: ${typeof e.obj}`:"Module object is null/undefined."),e.obj&&e.keyFn&&console.error(`app.js: Detail for '${e.name}': keyFn '${e.keyFn}' check failed. typeof mod.obj[mod.keyFn] is ${typeof e.obj[e.keyFn]}`),document.body.innerHTML=`
                    <p style='padding:20px; text-align:center; color:red;'>
                        Application Error: Module ${e.name} is invalid or missing.
                        Check console for details.
                    </p>`;return}console.log(`app.js: Module '${e.name}' check PASSED.`)}console.log("app.js: All critical module checks complete successfully."),console.log("app.js: Before assigning chatManager, window.chatOrchestrator is:",window.chatOrchestrator),window.chatOrchestrator?(window.chatManager=window.chatOrchestrator,console.log("app.js: window.chatManager is now aliased to window.chatOrchestrator. Value is:",window.chatManager)):console.error("app.js: CRITICAL - chatOrchestrator not found AFTER criticalModules check! This implies it failed the check. Chat functionality will fail."),console.log("app.js: Defining polyglotApp.initiateSession. Current window.polyglotApp:",window.polyglotApp),polyglotApp.initiateSession=(e,o)=>{console.log(`app.js: polyglotApp.initiateSession CALLED for ${(e==null?void 0:e.id)||"UnknownConnector"}, type: ${o}`);const w=window.viewManager,p=window.chatManager,n=window.sessionManager;if(console.log("app.js: initiateSession - Dependencies: viewManager:",!!w,"chatManager:",!!p,"sessionManager:",!!n),!w){console.error("app.js: initiateSession - viewManager is not available!");return}if(!p){console.error("app.js: initiateSession - chatManager (chatOrchestrator) is not available!");return}if(!n){console.error("app.js: initiateSession - sessionManager is not available!");return}if(!e||!e.id){console.error("app.js: initiateSession - invalid connector object or missing connector.id",e);return}switch(console.log("app.js: initiateSession - Connector and sessionTypeWithContext are valid. Proceeding with switch."),o){case"message":console.log("app.js: initiateSession - Case 'message'"),p.openConversation?p.openConversation(e):console.error("app.js: initiateSession - chatManager.openConversation is not defined!"),w.switchView?w.switchView("messages"):console.error("app.js: initiateSession - viewManager.switchView is not defined!");break;case"message_modal":console.log("app.js: initiateSession - Case 'message_modal'"),p.openMessageModal?p.openMessageModal(e):console.error("app.js: initiateSession - chatManager.openMessageModal is not defined!");break;case"direct_modal":console.log("app.js: initiateSession - Case 'direct_modal'"),n.startModalSession?n.startModalSession(e,o):console.error("app.js: initiateSession - sessionManager.startModalSession is not defined!");break;default:console.warn("app.js: Unknown sessionType in initiateSession:",o)}console.log("app.js: initiateSession - Switch statement finished.")},console.log("app.js: polyglotApp.initiateSession assignment complete. window.polyglotApp is now:",window.polyglotApp);function g(){console.log("app.js: setupGlobalModalButtonListeners - STARTING.");const e=window.domElements,o=window.sessionManager,w=window.chatManager,p=window.modalHandler;if(!e||!o||!w||!p){console.error("App.js setupGlobalModalButtonListeners: One or more core dependencies MISSING! Cannot setup all modal listeners.");return}e.closeRecapBtn?e.closeRecapBtn.addEventListener("click",()=>p.close(e.sessionRecapScreen)):console.warn("app.js: domElements.closeRecapBtn not found."),e.downloadTranscriptBtn?e.downloadTranscriptBtn.addEventListener("click",()=>{var u,j;const n=(u=e.sessionRecapScreen)==null?void 0:u.dataset.sessionIdForDownload;n?(j=o.downloadTranscriptForSession)==null||j.call(o,n):console.warn("app.js: No session ID for transcript download.")}):console.warn("app.js: domElements.downloadTranscriptBtn not found."),e.cancelCallBtn?e.cancelCallBtn.addEventListener("click",()=>{var n;return(n=o.cancelModalCallAttempt)==null?void 0:n.call(o)}):console.warn("app.js: domElements.cancelCallBtn not found."),e.directCallEndBtn?e.directCallEndBtn.addEventListener("click",()=>{var n;return(n=o.endCurrentModalSession)==null?void 0:n.call(o,!0)}):console.warn("app.js: domElements.directCallEndBtn not found."),e.directCallSpeakerToggleBtn?e.directCallSpeakerToggleBtn.addEventListener("click",()=>{var n;return(n=o.toggleDirectCallSpeaker)==null?void 0:n.call(o)}):console.warn("app.js: domElements.directCallSpeakerToggleBtn not found."),e.directCallMuteBtn?e.directCallMuteBtn.addEventListener("click",()=>{var n;return(n=o.handleDirectCallMicToggle)==null?void 0:n.call(o)}):console.warn("app.js: domElements.directCallMuteBtn not found."),e.closeMessagingModalBtn?e.closeMessagingModalBtn.addEventListener("click",()=>{var n,u;(u=(n=window.chatSessionHandler)==null?void 0:n.endActiveModalMessagingSession)==null||u.call(n)}):console.warn("app.js: domElements.closeMessagingModalBtn not found."),console.log("app.js: Global modal button listeners setup process finished.")}console.log("app.js: Modal message send button/input listeners are now expected to be handled by chat_event_listeners.js or chat_ui_manager.js via chatSessionHandler."),console.log("app.js: Global modal button listeners setup process finished."),console.log("app.js: Initializing core managers (after critical checks)..."),(m=window.conversationManager)!=null&&m.initialize?(console.log("app.js: Initializing conversationManager..."),window.conversationManager.initialize()):console.warn("app.js: window.conversationManager.initialize not found."),(t=window.chatOrchestrator)!=null&&t.initialize?(console.log("app.js: Initializing chatOrchestrator (which becomes chatManager)..."),window.chatOrchestrator.initialize()):console.warn("app.js: window.chatOrchestrator.initialize not found. This means chatManager will be a dummy."),window.chatOrchestrator&&(window.chatManager=window.chatOrchestrator,console.log("app.js: Re-affirmed window.chatManager alias to window.chatOrchestrator post-initialization. chatManager:",!!window.chatManager)),(s=window.sessionManager)!=null&&s.initialize?(console.log("app.js: Initializing sessionManager..."),window.sessionManager.initialize()):console.warn("app.js: window.sessionManager.initialize not found."),(a=window.groupManager)!=null&&a.initialize?(console.log("app.js: Initializing groupManager..."),window.groupManager.initialize()):console.warn("app.js: window.groupManager.initialize not found."),(l=window.chatSessionHandler)!=null&&l.initialize?(console.log("app.js: Initializing chatSessionHandler..."),window.chatSessionHandler.initialize()):console.warn("app.js: window.chatSessionHandler.initialize not found."),console.log("app.js: Core managers initialization sequence complete."),console.log("app.js: Initializing core UI (after manager initializations)...");let c=!1;(r=window.shellSetup)!=null&&r.initializeAppCore?(console.log("app.js: Calling window.shellSetup.initializeAppCore()..."),c=window.shellSetup.initializeAppCore(),console.log("app.js: window.shellSetup.initializeAppCore() returned:",c)):console.error("app.js: window.shellSetup.initializeAppCore is not available!"),!c&&window.shellSetup?console.error("app.js: Core UI initialization reported failure or shellSetup was missing initializeAppCore."):window.shellSetup||console.error("app.js: window.shellSetup is itself not available! Cannot initialize core UI."),console.log("app.js: Core UI initialization process finished."),(f=window.chatEventListeners)!=null&&f.initializeEventListeners?(console.log("app.js: Calling window.chatEventListeners.initializeEventListeners()..."),window.chatEventListeners.initializeEventListeners()):console.warn("app.js: window.chatEventListeners.initializeEventListeners not available."),(E=window.filterController)!=null&&E.initializeFilters?(console.log("app.js: Initializing filterController filters..."),window.filterController.initializeFilters()):console.warn("app.js: filterController.initializeFilters not available."),(d=window.viewManager)!=null&&d.initializeAndSwitchToInitialView?(console.log("app.js: Initializing viewManager and switching to initial view..."),window.viewManager.initializeAndSwitchToInitialView()):console.warn("app.js: viewManager.initializeAndSwitchToInitialView not available."),console.log("app.js: Preparing to setup global modal button listeners..."),g(),console.log("Polyglot Connect Application Initialized! (app.js: DOMContentLoaded end)")});console.log("app.js: Script parsing finished. DOMContentLoaded listener is set.");
