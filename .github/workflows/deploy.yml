# D:\polyglot_connect\.github\workflows\deploy.yml
name: Build and Deploy Polyglot Connect App to GitHub Pages

on:
  push:
    branches:
      - main # Deploy when changes are pushed to the main branch of THIS repo
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required by peaceiris/actions-gh-pages to push to gh-pages

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4 # Checks out this repo's code

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node.js LTS version

      - name: Install Dependencies (including dotenv-cli) ‚öôÔ∏è
        run: |
          npm ci 
          npm install -g dotenv-cli # Install dotenv-cli globally for the runner

      - name: Create .env file for Vite build üîë
        # This .env file is created at the root of the checked-out repository
        run: |
          echo "Creating .env file in repository root for Vite build..."
          echo "VITE_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > .env
          echo "VITE_GEMINI_API_KEY_ALT=${{ secrets.GEMINI_API_KEY_ALT }}" >> .env
          echo "VITE_GEMINI_API_KEY_ALT_2=${{ secrets.GEMINI_API_KEY_ALT_2 }}" >> .env
          echo "VITE_GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
          echo "VITE_TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> .env
          echo "VITE_TEST_VAR=HelloFromActionBuildWithDotenvCli" >> .env # Unique value for this test
          echo ".env file created. Verifying content:"
          cat .env # Log the content of the .env file to ensure it's correct

      - name: Build with Vite using dotenv-cli üõ†Ô∏è
        # Explicitly load the .env file before running the build command
        run: dotenv -e .env -- npm run build 

      - name: Verify Build Output (Debugging) üîç
        run: |
          echo "Listing contents of ./dist/ directory (Vite build output):"
          ls -R ./dist
          echo "--- Verifying index.html in dist ---"
          ls -A ./dist/index.html || echo "index.html NOT FOUND in dist"
          echo "--- Searching for VITE_TEST_VAR in bundled JS (should NOT be import.meta.env) ---"
          # This grep command will search for the *actual value* of VITE_TEST_VAR
          # or the literal 'import.meta.env' in your main JavaScript bundle.
          # Vite renames JS files with hashes, so find the main JS file.
          # Example: find ./dist/assets -name "*.js" -exec grep -H "HelloFromActionBuildWithDotenvCli" {} \;
          # Example: find ./dist/assets -name "*.js" -exec grep -H "import.meta.env.VITE_TEST_VAR" {} \;
          JS_BUNDLE_FILE=$(find ./dist/assets -name "main-*.js" -type f | head -n 1)
          if [ -n "$JS_BUNDLE_FILE" ]; then
            echo "Checking bundle: $JS_BUNDLE_FILE"
            if grep -q "HelloFromActionBuildWithDotenvCli" "$JS_BUNDLE_FILE"; then
              echo "‚úÖ VITE_TEST_VAR value was correctly injected into the JS bundle."
            else
              echo "‚ö†Ô∏è VITE_TEST_VAR value was NOT found in the JS bundle."
            fi
            if grep -q "import.meta.env.VITE_TEST_VAR" "$JS_BUNDLE_FILE"; then
              echo "‚ùå ERROR: 'import.meta.env.VITE_TEST_VAR' found literally in JS bundle. Vite did not replace it."
            else
              echo "‚úÖ 'import.meta.env.VITE_TEST_VAR' was correctly replaced by Vite (or not present)."
            fi
          else
            echo "Could not find main JS bundle in dist/assets/ to verify."
          fi

      - name: Deploy to gh-pages branch üöÄ
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist # Deploy the entire 'dist' folder created by Vite
          force_orphan: true  # Creates a fresh gh-pages branch history
          keep_files: false   # Ensures old files are removed from the branch